/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/admin/settings/network-size/{networkSize}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the network size */
        put: operations["updateNetworkSize"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/settings/latency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the latency settings */
        put: operations["updateLatencySettings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new player (or verify the registration of an existing player) */
        post: operations["registerPlayer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/scan-network/{playerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Scan the network to find all currently existing data sources */
        post: operations["scanNetwork"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/reset/{playerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Resets the current practice game for this player (if in practice mode) */
        post: operations["reset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/move/{playerId}/{ipAddress}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Move the player to the given IP address. */
        post: operations["move"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/honeypot/{playerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Place a honeypot to steal points from other players */
        post: operations["placeHoneypot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/download/{playerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Download data from the data source at the current location (if any) */
        post: operations["download"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset all the running games */
        post: operations["reset_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/final-game/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start the FINAL GAME */
        post: operations["startFinalGame"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/final-game/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Prepare for the FINAL GAME */
        post: operations["prepareForFinalGame"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/final-game/finish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finish the FINAL GAME */
        post: operations["finishFinalGame"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player/{playerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets player data */
        get: operations["getPlayer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/player/supported-emoji": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of supported emoji for the player profile */
        get: operations["getSupportedEmoji"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/{playerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the player state of the current game (if a game is busy or can be started) */
        get: operations["getCurrentGameState"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/network/{playerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets the network of nodes and edges for the current game (if a game is busy or can be started) */
        get: operations["getCurrentNetwork"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the game settings */
        get: operations["getGameSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/players": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of registered players */
        get: operations["getPlayers"];
        put?: never;
        post?: never;
        /** Delete all players */
        delete: operations["removeAllPlayers"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get an overview of all the games */
        get: operations["getAllGames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/players/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a registered player */
        delete: operations["removePlayer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        GameSettingsDTO: {
            /** Format: int32 */
            networkSize: number;
            latencySettings: components["schemas"]["LatencySettingsDTO"];
        };
        LatencySettingsDTO: {
            /** Format: int64 */
            baseDelay: number;
            /** Format: int64 */
            maxAdditionalDelay: number;
            /** Format: int32 */
            latencyMultiplierForInvalidMoves: number;
        };
        PlayerRegistrationRequest: {
            name: string;
            password: string;
            emojiAlias: string;
        };
        PlayerRegistrationResponse: {
            /** @enum {string} */
            status: "Registered" | "Invalid";
            /** Format: uuid */
            id?: string;
            message?: string;
        };
        DataSourceDTO: {
            /** Format: int32 */
            dataPoints: number;
            /** Format: int32 */
            blockSize: number;
            /** Format: int64 */
            latency: number;
        };
        GameStateDTO: {
            /** @enum {string} */
            state: "Waiting" | "Playing";
            /** Format: uuid */
            gameId?: string;
            location?: string;
            /** @enum {string} */
            action?: "Idle" | "Move" | "Download" | "ScanNetwork" | "PlaceHoneypot";
            dataSources?: {
                [key: string]: components["schemas"]["DataSourceDTO"];
            };
            specialActions?: ("ScanNetwork" | "PlaceHoneypot")[];
            /** Format: int32 */
            points: number;
        };
        EmptyBody: unknown;
        PlayerScoreDTO: {
            /** Format: uuid */
            playerId: string;
            /** Format: int32 */
            score: number;
        };
        PlayerDTO: {
            /** Format: uuid */
            id: string;
            name: string;
            emoji: string;
        };
        Emoji: {
            emoji: string;
            description: string;
            aliases: string[];
        };
        EdgeDTO: {
            from: string;
            to: string;
            /** Format: int32 */
            latency: number;
        };
        NetworkDTO: {
            nodes: string[];
            edges: components["schemas"]["EdgeDTO"][];
        };
        GameOverviewDTO: {
            finalGame?: components["schemas"]["GameStatisticsDTO"];
            practiceGames: {
                [key: string]: components["schemas"]["GameStatisticsDTO"];
            };
            players: {
                [key: string]: components["schemas"]["PlayerDTO"];
            };
        };
        GameStatisticsDTO: {
            /** Format: uuid */
            id: string;
            network: components["schemas"]["NetworkDTO"];
            players: {
                [key: string]: components["schemas"]["PlayerStatisticsDTO"];
            };
            dataSources: {
                [key: string]: components["schemas"]["DataSourceDTO"];
            };
            honeypots: {
                [key: string]: components["schemas"]["HoneypotDTO"];
            };
            ranking: components["schemas"]["PlayerScoreDTO"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            startedAt?: string;
            /** Format: date-time */
            lastUpdatedAt: string;
        };
        HoneypotDTO: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            owner: string;
            /** Format: int32 */
            numberOfVictims: number;
            /** Format: date-time */
            validUntil: string;
        };
        PlayerStatisticsDTO: {
            location: string;
            /** @enum {string} */
            action: "Idle" | "Move" | "Download" | "ScanNetwork" | "PlaceHoneypot";
            /** Format: int32 */
            points: number;
            /** Format: date-time */
            lastUpdated: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateNetworkSize: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                networkSize: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameSettingsDTO"];
                };
            };
        };
    };
    updateLatencySettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LatencySettingsDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameSettingsDTO"];
                };
            };
        };
    };
    registerPlayer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlayerRegistrationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerRegistrationResponse"];
                };
            };
        };
    };
    scanNetwork: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameStateDTO"];
                };
            };
        };
    };
    reset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    move: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playerId: string;
                ipAddress: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameStateDTO"];
                };
            };
        };
    };
    placeHoneypot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameStateDTO"];
                };
            };
        };
    };
    download: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameStateDTO"];
                };
            };
        };
    };
    reset_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmptyBody"];
                };
            };
        };
    };
    startFinalGame: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    prepareForFinalGame: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    finishFinalGame: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["PlayerScoreDTO"][];
                };
            };
        };
    };
    getPlayer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerDTO"];
                };
            };
        };
    };
    getSupportedEmoji: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Emoji"][];
                };
            };
        };
    };
    getCurrentGameState: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameStateDTO"];
                };
            };
        };
    };
    getCurrentNetwork: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["NetworkDTO"];
                };
            };
        };
    };
    getGameSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameSettingsDTO"];
                };
            };
        };
    };
    getPlayers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayerDTO"][];
                };
            };
        };
    };
    removeAllPlayers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmptyBody"];
                };
            };
        };
    };
    getAllGames: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["GameOverviewDTO"];
                };
            };
        };
    };
    removePlayer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EmptyBody"];
                };
            };
        };
    };
}
